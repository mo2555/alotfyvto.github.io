import{ShaderProgram as f}from'@geenee/armature';const o=['hips','spine','spine1','spine2','neck','head','headEnd','shoulderL','shoulderR','armL','armR','foreArmL','foreArmR','handL','handR','upLegL','upLegR','legL','legR','footL','footR','toeL','toeR'];function V(U){return Object['fromEntries'](o['map'](G=>[G,U(G)]));}class T extends f{constructor(U,G,N=0x1){super(U,G,['image'],{'size':'2f','flip':'1f'},'\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20precision\x20mediump\x20float;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20varying\x20vec2\x20coords;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20uniform\x20vec2\x20size;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20uniform\x20sampler2D\x20image;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20void\x20main()\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20float\x20res\x20=\x20texture2D(image,\x20coords).r;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(int\x20x\x20=\x20-'+N+';\x20x\x20<=\x20'+N+';\x20x++)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20for\x20(int\x20y\x20=\x20-'+N+';\x20y\x20<=\x20'+N+';\x20y++)\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20res\x20=\x20max(res,\x20texture2D(image,\x20coords\x20+\x20vec2(x,\x20y)\x20/\x20size).r);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20gl_FragColor\x20=\x20vec4(res,\x20res,\x20res,\x201.0);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}',void 0x0,!0x0);}}export{o as BoneList,T as DilationShader,V as mapSkeleton};
